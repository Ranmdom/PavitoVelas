generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  usuarioId BigInt     @id @default(autoincrement())
  nome      String
  sobrenome String
  email     String     @unique
  senhaHash String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  deletedAt DateTime?
  tipo      String     @default("cliente")
  cpf       String?    @db.VarChar(11)
  celular   String?    @db.VarChar(20)
  enderecos Endereco[]
  pedidos   Pedido[]
}

model Categoria {
  categoriaId BigInt    @id @default(autoincrement())
  nome        String
  descricao   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?
  produtos    Produto[]
}

model Produto {
  produtoId   BigInt       @id @default(autoincrement())
  categoriaId BigInt?
  nome        String
  preco       Decimal      @db.Decimal(10, 2)
  fragrancia  String?
  tempoQueima Int?
  descricao   String?
  peso        Decimal?     @db.Decimal(10, 2)
  altura      Decimal?     @db.Decimal(10, 2)
  largura     Decimal?     @db.Decimal(10, 2)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  deletedAt   DateTime?
  estoque     Int?         @default(1)
  imagens     String[]
  itensPedido ItemPedido[]
  categoria   Categoria?   @relation(fields: [categoriaId], references: [categoriaId])
}

model Pedido {
  pedidoId        BigInt           @id @default(autoincrement())
  usuarioId       BigInt
  statusPedido    String
  dataPedido      DateTime         @default(now())
  dataEnvio       DateTime?
  valorTotal      Decimal          @db.Decimal(10, 2)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  deletedAt       DateTime?
  stripeSessionId String?          @unique
  cartItemId      String?          @map("cart_item_id")
  EnderecoPedido  EnderecoPedido[]
  itensPedido     ItemPedido[]
  pagamentos      Pagamento[]
  usuario         Usuario          @relation(fields: [usuarioId], references: [usuarioId])
  shipments       Shipment[]
}

model ItemPedido {
  itemPedidoId  BigInt    @id @default(autoincrement())
  pedidoId      BigInt
  produtoId     BigInt
  quantidade    Int
  precoUnitario Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  deletedAt     DateTime?
  pedido        Pedido    @relation(fields: [pedidoId], references: [pedidoId], onDelete: Cascade, onUpdate: NoAction)
  produto       Produto   @relation(fields: [produtoId], references: [produtoId])
}

model Pagamento {
  pagamentoId           BigInt    @id @default(autoincrement())
  pedidoId              BigInt
  valor                 Decimal   @db.Decimal(10, 2)
  dataPagamento         DateTime  @default(now())
  statusPagamento       String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now())
  deletedAt             DateTime?
  stripePaymentIntentId String?
  pedido                Pedido    @relation(fields: [pedidoId], references: [pedidoId])
}

model Endereco {
  enderecoId BigInt    @id @default(autoincrement())
  usuarioId  BigInt
  logradouro String
  numero     String
  bairro     String?
  cidade     String
  estado     String
  cep        String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
  usuario    Usuario   @relation(fields: [usuarioId], references: [usuarioId])
}

model EnderecoPedido {
  enderecopedidoid BigInt    @id(map: "enderecopedidos_pkey") @default(autoincrement())
  pedidoId         BigInt
  logradouro       String?
  numero           String?
  bairro           String?
  cidade           String?
  estado           String?
  cep              String?
  createdAt        DateTime? @default(now()) @db.Timestamp(6)
  updatedAt        DateTime? @default(now()) @db.Timestamp(6)
  deletedAt        DateTime? @db.Timestamp(6)
  Pedido           Pedido    @relation(fields: [pedidoId], references: [pedidoId], onDelete: Cascade, onUpdate: NoAction, map: "fk_pedido")
}

model Shipment {
  shipmentId         BigInt   @id @default(autoincrement()) @map("shipment_id")
  pedidoId           BigInt   @map("pedido_id")
  melhorEnvioOrderId String   @unique @map("melhor_envio_order_id")
  etiquetaUrl        String   @map("etiqueta_url")
  status             String   @default("created")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  melhorEnvioQuoteId Int?     @map("melhor_envio_quote_id")
  trackingCode       String?  @map("tracking_code")
  trackingCarrier    String?  @map("tracking_carrier")
  trackingUrl        String?  @map("tracking_url")
  pedido             Pedido   @relation(fields: [pedidoId], references: [pedidoId], onDelete: Cascade, onUpdate: NoAction, map: "fk_shipments_pedido")

  @@index([pedidoId, createdAt(sort: Desc)], map: "shipments_pedido_created_idx")
  @@map("shipments")
}

model StripeEvent {
  id        String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model stripe_event {
  id         String   @id
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([created_at(sort: Desc)])
}
