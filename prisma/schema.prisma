generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  usuarioId        BigInt            @id @default(autoincrement())
  nome             String
  sobrenome        String
  email            String            @unique
  senhaHash        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  deletedAt        DateTime?
  tipo             String            @default("cliente")
  enderecos        Endereco[]
  metodosPagamento MetodoPagamento[]
  pedidos          Pedido[]
}

model Categoria {
  categoriaId BigInt    @id @default(autoincrement())
  nome        String
  descricao   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?
  produtos    Produto[]
}

model Produto {
  produtoId   BigInt       @id @default(autoincrement())
  categoriaId BigInt?
  nome        String
  preco       Decimal      @db.Decimal(10, 2)
  fragrancia  String?
  tempoQueima Int?
  descricao   String?
  peso        Decimal?     @db.Decimal(10, 2)
  altura      Decimal?     @db.Decimal(10, 2)
  largura     Decimal?     @db.Decimal(10, 2)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  deletedAt   DateTime?
  imagens     String[] 
  itensPedido ItemPedido[]
  estoque     Int?
  categoria   Categoria?   @relation(fields: [categoriaId], references: [categoriaId])
}

model Pedido {
  pedidoId     BigInt       @id @default(autoincrement())
  usuarioId    BigInt
  statusPedido String
  dataPedido   DateTime     @default(now())
  dataEnvio    DateTime?
  valorTotal   Decimal      @db.Decimal(10, 2)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  deletedAt    DateTime?
  itensPedido  ItemPedido[]
  pagamentos   Pagamento[]
  usuario      Usuario      @relation(fields: [usuarioId], references: [usuarioId])
  stripeSessionId String?   @unique // Adicionado para rastrear sessões do Stripe
}

model ItemPedido {
  itemPedidoId  BigInt    @id @default(autoincrement())
  pedidoId      BigInt
  produtoId     BigInt
  quantidade    Int
  precoUnitario Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  deletedAt     DateTime?
  pedido        Pedido    @relation(fields: [pedidoId], references: [pedidoId])
  produto       Produto   @relation(fields: [produtoId], references: [produtoId])
}

model MetodoPagamento {
  metodoPagamentoId BigInt      @id @default(autoincrement())
  usuarioId         BigInt
  nomeMetodo        String?
  numeroCartao      String?
  dataExpiracao     String?
  nomeTitular       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
  deletedAt         DateTime?
  usuario           Usuario     @relation(fields: [usuarioId], references: [usuarioId])
  pagamentos        Pagamento[]
  stripePaymentMethodId String? // Adicionado para métodos de pagamento do Stripe
}

model Pagamento {
  pagamentoId       BigInt          @id @default(autoincrement())
  pedidoId          BigInt
  metodoPagamentoId BigInt
  valor             Decimal         @db.Decimal(10, 2)
  dataPagamento     DateTime        @default(now())
  statusPagamento   String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  deletedAt         DateTime?
  metodoPagamento   MetodoPagamento @relation(fields: [metodoPagamentoId], references: [metodoPagamentoId])
  pedido            Pedido          @relation(fields: [pedidoId], references: [pedidoId])
  stripePaymentIntentId String?     // Adicionado para rastrear PaymentIntents do Stripe
}

model Endereco {
  enderecoId BigInt    @id @default(autoincrement())
  usuarioId  BigInt
  logradouro String
  numero     String
  bairro     String?
  cidade     String
  estado     String
  cep        String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
  usuario    Usuario   @relation(fields: [usuarioId], references: [usuarioId])
}
